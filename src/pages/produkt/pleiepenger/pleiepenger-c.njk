---
tags: ['produkt']
variant: 'C'
permalink: 'produkt/pleiepenger/c/index.html'
---
{%- extends 'base.njk' -%}

{%- from "macros/button.njk" import button -%}
{%- from "macros/microcard.njk" import microcard -%}
{%- from "macros/tile.njk" import tile -%}

{%- block content -%}

  {% set chapters = collections.all| onlyTags('pleiepenger', 'innhold') %}

  <main class="grid py-16 grid-cols-mini lg:grid-cols-maxi">
    <div class="col-main lg:col-wide">
      <div class="text-sm tracking-widest uppercase">{{ type | safe }}</div>
      <h1 class="mt-1 font-bold text-4xl/tight text-balance">{{ title | safe }}</h1>
      <div class="mt-8 text-lg text-pretty max-w-prose">{{ intro | markdown | safe }}</div>

      {# Audience #}
      <div class="mt-6 -ml-1">
        <span class="inline-block px-3 py-2 text-sm leading-none rounded-full bg-slate-200 ">
          {{ 'For ' if audience }}{{ audience | lower | safe }}
        </span>
      </div>
    </div>

    {# Innholdsfortegnelse #}
    <div class="mt-8 leading-normal lg:col-wide">
      <h2 class="text-base font-semibold">Innhold p√• siden</h2>
      <ul class="grid gap-2 mt-2 sm:grid-cols-2 lg:grid-cols-4 sm:-mx-6 lg:mx-0">
        {% for chapter in chapters.slice(0,4) %}
        <li class="relative grid items-start content-start gap-1 px-6 py-5 rounded-lg lg:aspect-[4/5] bg-slate-100 group hover:bg-blue-50">
          <a class="font-semibold underline text-base/snug group-hover:no-underline after:absolute after:inset-0" href="#{{ chapter.data.title | slugify }}">
            {{ chapter.data.title }}
          </a>
          <p class="text-base text-pretty">{{ chapter.data.description | safe }}</p>
        </li>
        {% endfor %}

        {% for chapter in chapters.slice(-1) %}
        <li class="relative grid sm:col-span-2 lg:col-span-4 items-center px-5 mt-2 py-3.5 bg-slate-100 rounded-xl group hover:bg-blue-50">
          <a class="font-semibold underline text-base/snug group-hover:no-underline after:absolute after:inset-0 " href="#{{ chapter.data.title | slugify }}">
            {{ chapter.data.title }}
          </a>
        </li>
        {% endfor %}
      </ul>
    </div>


    {# Innhold #}
    {% for chapter in chapters %}
      {% set chapterIndex = loop.index %}
      <section class="grid items-start pt-24 col-full grid-cols-mini lg:grid-cols-maxi" id="{{ chapter.data.title | slugify }}"  x-data="{ tocOpen: false }">

        <div class="lg:col-wide">
          <div class="grid items-end px-4 bg-slate-100 aspect-[5/2] rounded-xl">
            <span class="text-[360px]/[0.8] inline-block translate-y-8 font-black text-white">
              {{ loop.index }}
            </span>
          </div>
          <h2 class="mt-4 font-bold text-3xl/snug text-balance">{{ chapter.data.title }}</h2>
        </div>

        {# Chapter TOC #}
        {% if chapter.templateContent %}
        <nav class="py-4 mt-4 rounded-lg col-side lg:mt-8 lg:sticky lg:-translate-y-4 lg:order-1 bg-slate-100 toc toc--c toc--sticky lg:top-8">
          <h3 class="px-4 font-semibold">
            I dette kapittelet
            <span class="hidden lg:inline">({{ chapterIndex }})</span>
          </h3>
          <div class="px-3">
            {{ chapter.templateContent | toc | safe }}
          </div>
        </nav>
        {% endif %}

        {# Main Content #}
        <div class="mt-2 prose col-main">
          <p>{{ chapter.data.description | safe }}</p>

          {{ chapter.templateContent | markdown | safe }}
        </div>
      </section>
    {% endfor %}

    <div class="pt-2 mt-12 text-sm italic border-t border-slate-200 col-wide">{{ published | safe }}</div>
  </main>
{%- endblock -%}


{% block bodyscript %}
  <script>
    const headings = document.querySelectorAll('.prose h3');
    const headingsArr = Array.from(headings);

    const navItems = document.querySelectorAll('.toc--sticky li');

    function activateNavByIndex(index) {
      if (headings[index].classList.contains('active'))
        return;

      const currentActive = document.querySelectorAll('.toc--sticky .active');
      for (let i = currentActive.length - 1; i >= 0; i--) {
        currentActive[i].classList.remove('active');
      }
      navItems[index].classList.add('active');
    }

    const intersectionCallback = (entries, observer) => {
      if (entries[0].intesectionRatio <= 0)
          return;
      
      if (entries[0].intersectionRatio > 0.90) {    
        activateNavByIndex(headingsArr.indexOf(entries[0].target))
      }
    };

    const intersectionOptions = {
      threshold: 1,
      rootMargin: '15% 0px -70% 0px'
    };

    const intersectionObserver = new IntersectionObserver(intersectionCallback, intersectionOptions);

    for (let i = 0; i < headings.length; i++) {
      intersectionObserver.observe(headings[i]);  
    }

  </script>
{% endblock %}