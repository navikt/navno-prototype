---
tags: ['produkt']
description: 'Sticky navigasjon'
permalink: 'produkt/sykepenger/2/index.html'
variant: '2'
---
{%- extends 'base.njk' -%}

{%- from "macros/button.njk" import button -%}
{%- from "macros/microcard.njk" import microcard -%}
{%- from "macros/tile.njk" import tile -%}

{%- block content -%}
  {% set chapters = collections.all | onlyTags('sykepenger', 'innhold') | sort(false, false, 'data.order') %}

  <main class="grid py-16 grid-cols-center" data-theme="sykepenger" x-data="{ showChapter1: false, showChapter2: false, showChapter3: false, showChapter4: false, showChapter5: false, showToc: false, expandToc: false }">
    <div class="col-main">
      <div class="text-sm tracking-widest uppercase">{{ type | safe }}</div>
      <h1 class="mt-1 font-bold text-4xl/tight text-balance ">{{ title | safe }}</h1>
      <div class="mt-8 text-lg text-pretty max-w-prose">{{ ingress | markdown | safe }}</div>

      {# Audience #}
      {% if audience %}       
      <div class="mt-6 -ml-1">
        <span class="inline-block px-3 py-2 text-sm leading-none rounded-full bg-slate-200 ">
          For {{ audience | lower | safe }}
        </span>
      </div>
      {% endif %}
    </div>

    {# Innholdsfortegnelse #}
    <nav 
      class="my-8 bg-white"
      x-intersect:enter.margin.0%.0px.-65%.0px="showToc = false"
      x-intersect:leave.margin.0%.0px.-65%.0px="showToc = true"
    >
      <h2 class="pb-2 text-base font-semibold">Innhold på siden</h2>
      <ul class="grid gap-4 py-1">
        {% for chapter in chapters %}
        <li class="flex items-start gap-2">
          <a class="flex gap-1 p-1 -m-1 text-blue-500 group hover:text-blue-700 text-base/snug hover:underline" href="#{{ chapter.data.title | slugify }}">
            {{ '/src/_includes/svg/icons/arrow-right-angle.svg' | svgContents('-translate-y-px') | safe }}
            {{ chapter.data.title }}
          </a>
          {# <span class="flex-1 h-px min-w-4 -translate-y-[0.25em] bg-dotted-x" aria-hidden="true"></span> #}
          {# <p class="pr-4 mt-1.5 text-pretty opacity-85">{{ chapter.data.ingress | safe }}</p> #}
        </li>
        {% endfor %}
      </ul>
    </nav>

    {# Sticky Chapter TOC #}
    <div class="sticky top-2.5 px-3 -mx-3 rounded-lg py-2.5 z-10" x-bind:class="expandToc && 'bg-blue-50'" x-show="showToc">
      <button class="mx-auto pr-3 pl-4 py-1.5 flex gap-1 items-center rounded-full bg-slate-700 text-white hover:bg-slate-500" type="button" x-on:click="expandToc = !expandToc">
        <span>Innhold på siden</span>
        {{ '/src/_includes/svg/icons/chevron-down.svg' | svgContents('w-5 h-5') | safe }}
      </button>
      <div class="rounded-lg">
        <ol class="grid gap-2 toc toc--multi toc--sticky" x-show="expandToc" x-on:click.outside="expandToc = false">
        {% for chapter in chapters %}
        <li>
          <a class="flex items-end gap-1 py-1 font-semibold underline hover:no-underline decoration-blue-500" href="#{{ chapter.data.title | slugify }}">
            <span>{{ chapter.data.title }}</span>
            <span class="flex-1 h-px min-w-4 -translate-y-[0.375em] bg-dotted-x" aria-hidden="true"></span>
            {{ '/src/_includes/svg/icons/arrow-down.svg' | svgContents('w-7 h-7 p-1 rounded-full group-hover:bg-blue-500 group-hover:text-white') | safe }}
          </a>
            
          {% if chapter.templateContent %}
          <ul class="grid gap-2 py-1 pl-3 mb-4 opacity-90" x-show="showChapter{{ loop.index }}">
            {% for item in chapter.templateContent | tocData %}
            <li>
              <a class="flex items-end gap-1 py-1 decoration-blue-500 group text-base/snug hover:underline toc-highlight-pill" href="#{{ item.id }}">
                <span class="w-max">{{ item.text }}</span>
                {# <span class="flex-1 h-px min-w-4 -translate-y-[0.25em] bg-dotted-x" aria-hidden="true"></span>
                {{ '/src/_includes/svg/icons/arrow-down.svg' | svgContents('w-7 h-7 p-1 rounded-full group-hover:bg-blue-500 group-hover:text-white') | safe }} #}
              </a>
            </li>
            {% endfor %}
          </ul>
          {% endif %}
        </li>
        {% endfor %}
        </ol>
      </div>
    </div>

    {# Innhold #}
    {% for chapter in chapters %}
      {% set chapterIndex = loop.index %}
      <section 
        class="grid grid-flow-row-dense col-full grid-cols-center" 
        id="{{ chapter.data.title | slugify }}" 
        x-data="{ tocOpen: false }"
        x-intersect:enter.margin.-20%.0px.-60%.0px="showChapter{{ chapterIndex }} = true"
        x-intersect:leave.margin.-20%.0px.-60%.0px="showChapter{{ chapterIndex }} = false"
      >
        <div class="prose col-main">
          <h2 class="mt-8 mb-3 font-bold text-3xl/tight text-balance ">{{ chapter.data.title }}</h2>
          <p>{{ chapter.data.ingress | safe }}</p>

          {{ chapter.templateContent | markdown | safe }}
        </div>
      </section>
    {% endfor %}

    <div class="pt-2 mt-12 text-sm italic border-t border-slate-200 col-main">{{ published | safe }}</div>
  </main>
{%- endblock -%}


{% block bodyscript %}
  <script>
    const headings = document.querySelectorAll('.prose h3');
    const headingsArr = Array.from(headings);

    const navItems = document.querySelectorAll('.toc--sticky li');

    function activateNavByIndex(index) {
      if (headings[index].classList.contains('active'))
        return;

      const currentActive = document.querySelectorAll('.toc--sticky .active');
      for (let i = currentActive.length - 1; i >= 0; i--) {
        currentActive[i].classList.remove('active');
      }
      navItems[index].classList.add('active');
    };

    const intersectionCallback = (entries, observer) => {
      if (entries[0].intesectionRatio <= 0)
          return;
      
      if (entries[0].intersectionRatio > 0.90) {    
        activateNavByIndex(headingsArr.indexOf(entries[0].target))
      }
    };

    const intersectionOptions = {
      threshold: 1,
      rootMargin: '15% 0px -60% 0px'
    };

    const intersectionObserver = new IntersectionObserver(intersectionCallback, intersectionOptions);

    for (let i = 0; i < headings.length; i++) {
      intersectionObserver.observe(headings[i]);  
    };

  </script>
{% endblock %}